// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=loadToARegA);
    And(a=instruction[15], b=instruction[5], out=loadToARegC);
    Mux16(a=instruction, b=AluOut, sel=instruction[15], out=selARegInp);
    Or(a=loadToARegA, b=loadToARegC, out=loadToAReg);
    ARegister(
    	in=selARegInp,
       	load=loadToAReg,
       	out=ARegOut, out[0..14]=addressM);

    And(a=instruction[4], b=instruction[15], out=loadToDReg);
    DRegister(in=AluOut, load=loadToDReg, out=DRegOut);

    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AluY);
    ALU(
    	x=DRegOut, y=AluY,
       	zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
       	out=AluOut, out=outM,
       	zr=AluZr, ng=AluNg);

    And(
    	a=instruction[3], b=instruction[15],
       	out=writeM); 

    Not(in=AluNg, out=NotAluNg);
    Not(in=AluZr, out=NotAluZr);
    And(a=NotAluNg, b=AluZr, out=isZero);
    And(a=NotAluNg, b=NotAluZr, out=isPositive);
    And(a=AluNg, b=NotAluZr, out=isNegative);
    And(a=instruction[0], b=isPositive, out=jgt);
    And(a=instruction[1], b=isZero, out=jeq);
    And(a=instruction[2], b=isNegative, out=jlt);
    Mux8Way16(
    	a=false,
       	b=true, c=true, d=true, e=true, f=true, g=true, h=true,
       	sel[0]=jgt, sel[1]=jeq, sel[2]=jlt,
       	out[0]=doJmp);
    And(a=instruction[15], b=doJmp, out=loadPC);
    Not(in=loadPC, out=incPC);
    PC(in=ARegOut, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}
